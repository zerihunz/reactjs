July 2014

BLack lion Aug 2005 - May 2013


https://medium.com/aryas-books/my-minimal-personal-living-plan-b8942f4be2ba   //Healthy Living
Core Javascript Concepts
- let vs var vs const
  let and const are two new ways to declare variables in ES6
  
  var is function scoped, which means if a variable is declared using var in a block, it's still accessible outside of the block, in the function.
  
  var declarations are globally scoped or function scoped while let and const are block scoped. 
  var variables can be updated and re-declared within its scope; 
  let variables can be updated but not re-declared; const variables can neither be updated nor re-declared
  
      Main difference between var and let is that, let is block scoped, which means that a variable created with let is available only inside the block that it was created in.
    
    var VS let

	var: 
	  function scoped
	  undefined when accessing a variable before it's declared

	let: 
	  block scoped
	  ReferenceError when accessing a variable before it's declared
	  
	Const is almost exactly the same as let except, the only difference is that once you've assigned a value to a variable using const, you can't reassign it to a new value.  
	
	var VS let VS const

	var: 
	  function scoped
	  undefined when accessing a variable before it's declared

	let: 
	  block scoped
	  ReferenceError when accessing a variable before it's declared

	const:
	  block scoped
	  ReferenceError when accessing a variable before it's declared
	  can't be reassigned
	  
	  The most popular opinion, and the opinion that I subscribe to, is that you should always use const unless you know the variable is going to change. 
	  The reason for this is by using const, you’re signalling to your future self as well as any other future developers that have to read your code that 
	  this variable shouldn’t change. If it will need to change (like in a for loop), you should use let.
	  
	  So between variables that change and variables that don’t change, there’s not much left. That means you shouldn’t ever have to use var again.
	  https://tylermcginnis.com/var-let-const/

  
-Functions are first-class citizens in JavaScript
 Unlike in other languages, a function can be assigned to a variable, passed around as an argument to another 
 function and can also be returned from another. Hence, it is the first class citizen in the JS. 
 	console.log(square(5));
 
	var square = function(n) { 
  		return n * n; 
	}
	at first sight, you might be tempted to say it prints 25. False! Instead, it shouts for the first line.
    TypeError: square is not a function
    
    In JavaScript, if you define a function as a variable, the variable name will be hoisted but you cannot access until JS execution encounters its definition.
    
    In Javascript, there is no special syntax for pass by value and pass by reference:
    In Javascript objects and arrays follows pass by reference, While Strings and numbers are always passed by value
    
    In addition to creating a function like square above. It's also possible to create an anonymous, like:
    
    const square = function(n) { return n * n }
    var x = square(4)  //x will be 16
    
    A name can be provided also for the above type of function which can be used in recursive function and for debugging
    
    const factorial = function fac(n) { return n < 2 ? 1 : n * fac(n - 1) }
    
    and here is a function that takes a function as first argument and array as second, 
    the function receives a function defined by an expression and executes it for every element of the array received as a second argument.
    
    	the function definition and explanation here:  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions
    	
    In JavaScript, a function can be defined based on a condition. For example, a function can be defined only if num equals 0:	
    
    In Javascript, variables are initialized with the value of undefined when they are created.  That's called Hoisting, the assignment of 
    a default value of "undefined" to a variable in javascript.
    
    A closure is a combination of a function bundled together (enclosed) with references to its surrounding state
    A closure gives you access to an outer function’s scope from an inner function.
    
    JavaScript allows for the nesting of functions and grants the inner function full access to all the variables and 
    functions defined inside the outer function (and all other variables and functions that the outer function has access to).
    A closure is created when the inner function is somehow made available to any scope outside the outer function.
    
    Using the arguments object, you can call a function with more arguments than it is formally declared to accept. 
    This is often useful if you don't know in advance how many arguments will be passed to the function.    
	You can use arguments.length to determine the number of arguments actually passed to the function, and then access each argument using the arguments object.
	
	function myContact(separator){
	    var result = '';
		var i;
		for(i=1;i<arguments.length;i++){
			result += arguments[i] + separator;
		}
		return result;
	}
	
	Starting with ECMAScript 2015, there are two new kinds of parameters: default parameters and rest parameters.

	In JavaScript, parameters of functions default to undefined. However, in some situations it might be useful to set a 
	different default value. This is exactly what default parameters do.
	
	function multiply(a, b = 1) {
	  return a * b;
	}

	multiply(5); // 5
	
	REST Parameter
	The rest parameter syntax allows us to represent an indefinite number of arguments as an array.
	
	A function's last parameter can be prefixed with ... which will cause all remaining (user supplied) arguments to be placed within a "standard" JavaScript array.
	
	function sum(...theArgs) {
	  	return theArgs.reduce((previous, current) => {
    		return previous + current;
  		});
	}

	console.log(sum(1, 2, 3));
	// expected output: 6

	console.log(sum(1, 2, 3, 4));
	// expected output: 10
	
	
	// es6 rest parameter 
	function fun(...input){ 
    	let sum = 0; 
	    for(let i of input){ 
    	    sum+=i; 
    	} 
    	return sum; 
	} 
	console.log(fun(1,2)); //3 
	console.log(fun(1,2,3)); //6 
	console.log(fun(1,2,3,4,5)); //15
	
	//arrow functions are shorter
	var a = ['Hydrogen', 'Helium', 'Lithium', 'Beryllium'];

	var a2 = a.map(function(s) { return s.length; });

	console.log(a2); // logs [8, 6, 7, 9]

	var a3 = a.map(s => s.length);

	console.log(a3); // logs [8, 6, 7, 9]
	

    Until arrow functions, every new function defined its own this value (a new object in the case of a constructor, undefined in strict mode function calls, 
    the base object if the function is called as an "object method", etc.). This proved to be less than ideal with an object-oriented style of programming.	
    
    function Person() {
	    // The Person() constructor defines `this` as itself.
  		this.age = 0;

		setInterval(function growUp() {
		    // In nonstrict mode, the growUp() function defines `this` 
		    // as the global object, which is different from the `this`
		    // defined by the Person() constructor.
		    this.age++;
		}, 1000);
	}

	var p = new Person();
	
	In ECMAScript 3/5, this issue was fixed by assigning the value in this to a variable that could be closed over.

	function Person() {
  		var self = this; // Some choose `that` instead of `self`. Choose one and be consistent.
		self.age = 0;

	    setInterval(function growUp() {
    		// The callback refers to the `self` variable of which
    		// the value is the expected object.
    		self.age++;
		}, 1000);
	}
	
	An arrow function does not have its own this; the this value of the enclosing execution context is used. 
	Thus, in the following code, the this within the function that is passed to setInterval has the same value as this in the enclosing function:

	function Person() {
	  this.age = 0;

  	  setInterval(() => {
    	this.age++; // |this| properly refers to the person object
  	  }, 1000);
	}

  var p = new Person();
    
    
    
-bind(), apply(), and call()
	These allow something called currying using which we can compose the functionality into different functions.
	Basically, these are the prototype methods of functions to alter behavior to achieve something.
	Use .bind() when you want that function to later be called with a certain context, useful in events. 
	Use .call() or .apply() when you want to invoke the function immediately, with modification of the context.
	
	E.g:
	var mathLib = {
    	pi: 3.14,
	    area: function(r) {
        	return this.pi * r * r;
    	},
	    circumference: function(r) {
        	return 2 * this.pi * r;
    	}
	};
	
	mathLib.area(2);    //prints 12.56
	
	let's say that is a library that's already submitted as an assignment and you can't change it.
	
	and now you're asked to calculate area with 5 decimal places. That's when the JS call function saves you
	
	mathLib.area.call({pi: 3.14159}, 2);    //prints 12.56636
	
	The call function takes two arguments, a context and function arguments
	
	A context is an object that replaces this keyword inside the area function .
	
	Another Example:
	
	var cylinder = {
    	pi: 3.14,
    	volume: function(r, h) {
        	return this.pi * r * r * h;
    	}
	};
	
	Call invocation is like this
	
	cylinder.volume.call({pi: 3.14159}, 2, 6);
	75.39815999999999
	
	The function arguments are passed as subsequent arguments after the context object.
	
	"Apply" is exactly the same except function arguments are passed as a list.
	
	cylinder.volume.apply({pi: 3.14159}, [2, 6]);
	75.39815999999999 
	
	"Bind" attaches a brand new this to a given function. In bind’s case, the function is not executed instantly like Call or Apply.
	
	var newVolume = cylinder.volume.bind({pi: 3.14159}); // This is not instant call
	
	// After some long time, somewhere in the wild 
	newVolume(2,6); // Now pi is 3.14159
	What is the use of Bind? It allows us to inject a context into a function which returns a new function with updated context. 
	It means this variable will be user supplied variable. This is very useful while working with JavaScript events.
	
	
  
-Scopes and Closures
-this
-Objects (e.g. Object.keys(myObj).map(key => myMap[key]))
-Arrays (e.g. [1, 2].reduce((sum, summand) => sum + summand, 0))
-Prototypical Inheritance -> ES6 Class
-Callbacks and Promises
-Event Loop
-Event Bubbling
-Regular Expressions
-Error handling (promise.then(...).catch(...), try { } catch(e) { })
-JavaScript ES6 and beyond
-Hoisting, Memoization
-Declarative vs imperative programming
-Functional vs object-oriented programming